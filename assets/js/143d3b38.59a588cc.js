"use strict";(self.webpackChunkupb_rustworkshop_github_io=self.webpackChunkupb_rustworkshop_github_io||[]).push([[6883],{1438:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"web_server/build-a-system-monitor/index","title":"Build a system monitor","description":"Welcome to the workshop on building a system monitor with Axum! In this session, we\'ll explore how to create a high-performance HTTP server that exposes real-time and on-demand metrics about the system it\u2019s running on\u2014perfect for monitoring resource usage, debugging, or integrating with observability tools.","source":"@site/docs/web_server/2.build-a-system-monitor/index.md","sourceDirName":"web_server/2.build-a-system-monitor","slug":"/web_server/build-a-system-monitor/","permalink":"/docs/web_server/build-a-system-monitor/","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-RustWorkshop/upb-rustworkshop.github.io/edit/main/docs/web_server/2.build-a-system-monitor/index.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/docs/web_server/getting-started"},"next":{"title":"Task 1 - Add `/healthcheck` endpoint","permalink":"/docs/web_server/build-a-system-monitor/task-1"}}');var n=t(4848),r=t(8453);const o={sidebar_position:2},l="Build a system monitor",d={},c=[{value:"What You\u2019ll Build",id:"what-youll-build",level:2},{value:"Why This Project?",id:"why-this-project",level:2},{value:"<strong>Skill Progression</strong>",id:"skill-progression",level:3}];function a(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.header,{children:(0,n.jsx)(s.h1,{id:"build-a-system-monitor",children:"Build a system monitor"})}),"\n",(0,n.jsxs)(s.p,{children:["Welcome to the workshop on building a system monitor with ",(0,n.jsx)(s.strong,{children:"Axum"}),"! In this session, we'll explore how to create a high-performance HTTP server that exposes real-time and on-demand metrics about the system it\u2019s running on\u2014perfect for monitoring resource usage, debugging, or integrating with observability tools."]}),"\n",(0,n.jsx)(s.h2,{id:"what-youll-build",children:"What You\u2019ll Build"}),"\n",(0,n.jsx)(s.p,{children:"Your system monitor server will expose four key endpoints:"}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["GET ",(0,n.jsx)(s.code,{children:"/healthcheck"}),": A simple endpoint to verify the server is running."]}),"\n",(0,n.jsxs)(s.li,{children:["GET ",(0,n.jsx)(s.code,{children:"/metrics"}),": Retrieve a comprehensive summary of system metrics."]}),"\n",(0,n.jsxs)(s.li,{children:["GET ",(0,n.jsx)(s.code,{children:"/metrics/{kind}"}),": Fetch specific metrics (e.g., system, process, memory, cpu, or disk) to drill down into performance data."]}),"\n",(0,n.jsxs)(s.li,{children:["GET ",(0,n.jsx)(s.code,{children:"/realtime"}),": Stream live metric updates using Server-Sent Events (SSE), providing a real-time dashboard experience."]}),"\n"]}),"\n",(0,n.jsx)(s.h2,{id:"why-this-project",children:"Why This Project?"}),"\n",(0,n.jsx)(s.p,{children:"By building this server, you\u2019ll gain practical experience with:"}),"\n",(0,n.jsxs)(s.ul,{children:["\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Rust\u2019s async ecosystem"}),": Using Axum and Tokio to handle concurrent HTTP requests."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"System programming"}),": Interacting with low-level OS APIs to collect metrics like CPU usage, memory allocation, and disk I/O."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"Real-time communication"}),": Implementing SSE to push updates to clients without polling."]}),"\n"]}),"\n",(0,n.jsxs)(s.li,{children:["\n",(0,n.jsxs)(s.p,{children:[(0,n.jsx)(s.strong,{children:"API design"}),": Structuring clean, maintainable endpoints for extensibility."]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(s.p,{children:"Whether you\u2019re new to systems programming or looking to deepen your Rust expertise, this project bridges the gap between theory and real-world applications. Let\u2019s dive in and build a tool that\u2019s as educational as it is practical! \ud83d\ude80"}),"\n",(0,n.jsx)(s.h3,{id:"skill-progression",children:(0,n.jsx)(s.strong,{children:"Skill Progression"})}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Task 1"}),": Organize the project structure and set up the ",(0,n.jsx)(s.code,{children:"/healthcheck"})]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Task 2"}),": Implement the ",(0,n.jsx)(s.code,{children:"/metrics"})," and ",(0,n.jsx)(s.code,{children:"/metrics/{kind}"})," endpoints"]}),"\n",(0,n.jsxs)(s.li,{children:[(0,n.jsx)(s.strong,{children:"Task 3"}),": Add the ",(0,n.jsx)(s.code,{children:"/realtime"})," endpoint to server realtime metrics."]}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>l});var i=t(6540);const n={},r=i.createContext(n);function o(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);