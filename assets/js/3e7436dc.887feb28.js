"use strict";(self.webpackChunkupb_rustworkshop_github_io=self.webpackChunkupb_rustworkshop_github_io||[]).push([[4814],{7229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>h,default:()=>a,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"embassy/hints","title":"Hints","description":"If you ended up here by mistake, do not proceed forward. SPOILERS AHEAD!","source":"@site/docs/embassy/hints.md","sourceDirName":"embassy","slug":"/embassy/hints","permalink":"/docs/embassy/hints","draft":false,"unlisted":true,"editUrl":"https://github.com/UPB-RustWorkshop/upb-rustworkshop.github.io/edit/main/docs/embassy/hints.md","tags":[],"version":"current","frontMatter":{"unlisted":true},"sidebar":"tutorialSidebar"}');var r=t(4848),o=t(8453);const s={unlisted:!0},h="Hints",d={},c=[{value:"Hi, I am new here! - Hint 01",id:"hi-i-am-new-here---hint-01",level:2},{value:"Hi, I am new here! - Hint 02",id:"hi-i-am-new-here---hint-02",level:2},{value:"Hi, I am new here! - Hint 03",id:"hi-i-am-new-here---hint-03",level:2},{value:"Sing your own tune - Hint 01",id:"sing-your-own-tune---hint-01",level:2},{value:"Sing your own tune - Hint 02",id:"sing-your-own-tune---hint-02",level:2},{value:"Sing your own tune - Hint 03",id:"sing-your-own-tune---hint-03",level:2},{value:"The temperature is rising - Hint 01",id:"the-temperature-is-rising---hint-01",level:2},{value:"The temperature is rising - Hint 02",id:"the-temperature-is-rising---hint-02",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"hints",children:"Hints"})}),"\n",(0,r.jsx)(n.admonition,{title:"STOP!",type:"danger",children:(0,r.jsxs)(n.p,{children:["If you ended up here by mistake, do not proceed forward. ",(0,r.jsx)(n.strong,{children:"SPOILERS AHEAD!"})]})}),"\n",(0,r.jsx)(n.h2,{id:"hi-i-am-new-here---hint-01",children:"Hi, I am new here! - Hint 01"}),"\n",(0,r.jsxs)(n.p,{children:["Try using the ",(0,r.jsx)(n.code,{children:"info!"})," macro. It's syntax is identical to the one used by ",(0,r.jsx)(n.code,{children:"print!"})," and ",(0,r.jsx)(n.code,{children:"println!"}),", found in the standard library."]}),"\n",(0,r.jsx)(n.h2,{id:"hi-i-am-new-here---hint-02",children:"Hi, I am new here! - Hint 02"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"wait_for_*"})," functions are particularly interesting. Try to figure out which one should you use."]}),"\n",(0,r.jsx)(n.h2,{id:"hi-i-am-new-here---hint-03",children:"Hi, I am new here! - Hint 03"}),"\n",(0,r.jsx)(n.p,{children:"I know you can do it, give yourself a bit of a challenge."}),"\n",(0,r.jsx)(n.h2,{id:"sing-your-own-tune---hint-01",children:"Sing your own tune - Hint 01"}),"\n",(0,r.jsxs)(n.p,{children:["You will need to use the table in ",(0,r.jsx)(n.strong,{children:"Section 12.5.2. Programmer's Model"})," to figure out the PWM channel for the chosen pin. The function you will need to use the ",(0,r.jsx)(n.code,{children:"pwm::Config"}),", to modify the ",(0,r.jsx)(n.code,{children:"top"})," and ",(0,r.jsx)(n.code,{children:"compare"})," registers' values and the ",(0,r.jsx)(n.code,{children:"Pwm::new_output_X()"})," function, where ",(0,r.jsx)(n.code,{children:"X"})," will be either ",(0,r.jsx)(n.code,{children:"a"})," or ",(0,r.jsx)(n.code,{children:"b"}),", depending on the pin's channel. The first argument will have to be the PWM slice of the pin, the second one the pin itself, and the third, the PWM config. To be able to reuse the config later, you can pass a clone to the function."]}),"\n",(0,r.jsx)(n.h2,{id:"sing-your-own-tune---hint-02",children:"Sing your own tune - Hint 02"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"/// Beats per minute.\nconst TEMPO: u64 = 100;\n/// A whole note duration in milliseconds.\nconst WHOLE_NOTE: u64 = 4 * (60_000 / TEMPO)\n/// The microcontroller clock frequency\nconst CLOCK_FREQ: u64 = 150_000_000;\n/// PWM clock divider\nconst PWM_DIV: u64 = 64;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"sing-your-own-tune---hint-03",children:"Sing your own tune - Hint 03"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"note_freq = cpu_freq / (divider * top)"})}),"\n",(0,r.jsxs)(n.p,{children:["In order to configure the PWM output, you can use the default value, and change the ",(0,r.jsx)(n.code,{children:"divider"})," filed of the ",(0,r.jsx)(n.code,{children:"pwm::Config"}),". The code should look like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"let buzzer_cfg = pwm::Config::default();\nbuzzer_cfg.divider = PWM_DIV.to_fixed();\nlet mut buzzer = pwm::Pwm::new_output_x(\n    p.PWM_SLICEX,\n    p.PIN_Y,\n    buzzer_cfg.clone()\n);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Where the ",(0,r.jsx)(n.code,{children:"Y"})," is the pin number, and the slice number (",(0,r.jsx)(n.code,{children:"X"}),") and half (",(0,r.jsx)(n.code,{children:"x"}),") depend on the choice of pin."]}),"\n",(0,r.jsxs)(n.p,{children:["For each note, you will need to change the PWM configuration. Take a look at the methods implemented for the ",(0,r.jsx)(n.a,{href:"https://docs.embassy.dev/embassy-rp/git/rp235xb/pwm/struct.Pwm.html",children:(0,r.jsx)(n.code,{children:"Pwm"})})," structure."]}),"\n",(0,r.jsx)(n.h2,{id:"the-temperature-is-rising---hint-01",children:"The temperature is rising - Hint 01"}),"\n",(0,r.jsxs)(n.p,{children:["RGB colors are represented as 3 bytes, one for each color channel. Red is ",(0,r.jsx)(n.code,{children:"(255, 0, 0)"})," and blue is ",(0,r.jsx)(n.code,{children:"(0, 0, 255)"}),". You will need to configure 3 PWM output pins, one for each of the three colors and wire them accordingly. For simplicity, you should set the top register to be ",(0,r.jsx)(n.code,{children:"255"}),", and ",(0,r.jsx)(n.strong,{children:"because the LED is a common anode"}),", the control is ",(0,r.jsx)(n.em,{children:"reversed"}),". So if I would like to produce a color that has ",(0,r.jsx)(n.code,{children:"180"})," in the ",(0,r.jsx)(n.strong,{children:"red"})," channel, I need to set the compare register value to ",(0,r.jsx)(n.code,{children:"75"}),"(255 - 180)."]}),"\n",(0,r.jsx)(n.p,{children:"To make the light fade from red to blue, you can simply interpolate between the two points at a regular interval (such as 10ms, for example), with a given step."}),"\n",(0,r.jsx)(n.h2,{id:"the-temperature-is-rising---hint-02",children:"The temperature is rising - Hint 02"})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>h});var i=t(6540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);