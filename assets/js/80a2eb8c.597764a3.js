"use strict";(self.webpackChunkupb_rustworkshop_github_io=self.webpackChunkupb_rustworkshop_github_io||[]).push([[2236],{1384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"web_server/build-a-system-monitor/task-1","title":"Task 1 - Add `/healthcheck` endpoint","description":"Before diving in, first we\'ll setup some conventions for organizing the code, which will help us maintain a clean and scalable project structure, benefits of the Rust module system.","source":"@site/docs/web_server/2.build-a-system-monitor/1.task-1.md","sourceDirName":"web_server/2.build-a-system-monitor","slug":"/web_server/build-a-system-monitor/task-1","permalink":"/docs/web_server/build-a-system-monitor/task-1","draft":false,"unlisted":false,"editUrl":"https://github.com/UPB-RustWorkshop/upb-rustworkshop.github.io/edit/main/docs/web_server/2.build-a-system-monitor/1.task-1.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Task 1 - Add `/healthcheck` endpoint"},"sidebar":"tutorialSidebar","previous":{"title":"Build a system monitor","permalink":"/docs/web_server/build-a-system-monitor/"},"next":{"title":"Task 2 - Implement the `/metrics` endpoints","permalink":"/docs/web_server/build-a-system-monitor/task-2"}}');var r=t(4848),o=t(8453);const i={title:"Task 1 - Add `/healthcheck` endpoint"},a="Task 1: Organize the project structure and set up the /healthcheck endpoint",c={},d=[{value:"Your Task",id:"your-task",level:2},{value:"Conclusion",id:"conclusion",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsxs)(n.h1,{id:"task-1-organize-the-project-structure-and-set-up-the-healthcheck-endpoint",children:["Task 1: Organize the project structure and set up the ",(0,r.jsx)(n.code,{children:"/healthcheck"})," endpoint"]})}),"\n",(0,r.jsx)(n.p,{children:"Before diving in, first we'll setup some conventions for organizing the code, which will help us maintain a clean and scalable project structure, benefits of the Rust module system."}),"\n",(0,r.jsxs)(n.p,{children:["The router will live inside the ",(0,r.jsx)(n.code,{children:"src/routes"})," module, and each endpoint will have its own module. This way, we can keep the codebase organized and easy to navigate."]}),"\n",(0,r.jsx)(n.p,{children:"To do so, we'll update the directory structure as such:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"upb-rust-workshop/\n\u251c\u2500 src/\n\u2502  \u251c\u2500 routes/\n\u2502  \u2502  \u2514\u2500 mod.rs\n\u2502  \u2514\u2500 main.rs      # Entry point\n\u251c\u2500 target/         # Build artifacts\n\u251c\u2500 .gitignore      # Git ignore file\n\u251c\u2500 Cargo.lock      # Dependency lock file\n\u2514\u2500 Cargo.toml      # Project manifest\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Within ",(0,r.jsx)(n.code,{children:"src/routes/mod.rs"}),", we'll move the router initialization from ",(0,r.jsx)(n.code,{children:"main.rs"})," as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="src/routes/mod.rs"',children:'use axum::Router;\n\npub fn app() -> Router {\n    Router::new().route("/", get(async || "Hello, World!"))\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["After that, the ",(0,r.jsx)(n.code,{children:"main.rs"})," will become:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="src/main.rs"',children:'pub mod routes;\n\nuse axum;\n\n#[tokio::main]\nasync fn main() {\n    let listener = tokio::net::TcpListener::bind("0.0.0.0:8080").await.unwrap();\n    println!(\n        "Server running on http://{}",\n        listener.local_addr().unwrap()\n    );\n    axum::serve(listener, routes::app()).await.unwrap();\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you run the server now, you should see the message ",(0,r.jsx)(n.code,{children:"Server running on http://0.0.0.0:8080"}),", and the ",(0,r.jsx)(n.code,{children:"/"})," endpoint should return ",(0,r.jsx)(n.code,{children:"Hello, World!"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Now, let's add a ",(0,r.jsx)(n.code,{children:"/healthcheck"})," endpoint to our server. This endpoint will be used to check if the server is running and healthy."]}),"\n",(0,r.jsxs)(n.p,{children:["To do so, create a new module ",(0,r.jsx)(n.code,{children:"src/routes/healthcheck.rs"})," and add the following code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="src/routes/healthcheck.rs"',children:'use axum::{Router, http::StatusCode, response::IntoResponse, routing::get};\n\npub fn register() -> Router {\n    Router::new().route("/", get(health_check))\n}\n\nasync fn health_check() -> impl IntoResponse {\n    todo!("Implement the health check endpoint")\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Next, update ",(0,r.jsx)(n.code,{children:"src/routes/mod.rs"})," to include the new module:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="src/routes/mod.rs"',children:'use axum::Router;\n\nmod healthcheck;\n\npub fn app() -> Router {\n    Router::new().nest("/healthcheck", healthcheck::register())\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Why we did that? By nesting the ",(0,r.jsx)(n.code,{children:"/healthcheck"})," route inside the main router, we can easily add more routes in the future without cluttering the main router."]}),"\n",(0,r.jsx)(n.h2,{id:"your-task",children:"Your Task"}),"\n",(0,r.jsxs)(n.p,{children:["As task, implement the ",(0,r.jsx)(n.code,{children:"health_check"})," function to return a ",(0,r.jsx)(n.code,{children:"200 OK"})," status code with the message ",(0,r.jsx)(n.code,{children:"Server is running"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["In this task, we've organized the project structure and added a ",(0,r.jsx)(n.code,{children:"/healthcheck"})," endpoint to our server. This will help us maintain a clean and scalable codebase as we add more features to our web server."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var s=t(6540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);